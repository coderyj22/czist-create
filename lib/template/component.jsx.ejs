import React, { useState, useRef } from "react";
import { connect, history } from "umi";
import { PageHeaderWrapper } from "@ant-design/pro-layout";
import { Space, Button } from "antd";

const <%= data.name%>Page = (props) => {
  const { dispatch } = props;
  const [optionBtn, setOptionBtn] = useState(""); 
  const actionRef = useRef();
  const [sorter, setSorter] = useState("");

  const fetchData = fields => {
    return ProGetList({
      dispatch,
      url:"<%= data.lowerName%>/getList",
      orderByName:"Code",
      isAsc:false,
      searchInfo:{}
    })
  }
  const columns = [
    {
      title: "仓库名称",
      dataIndex: "WarehouseName",
      key: "WarehouseName",
      width: 150,
    },
    {
      title: "仓库Id",
      dataIndex: "WarehouseId",
      key: "WarehouseId",
      hidden: true,
    },
    {
      title: "操作",
      dataIndex: "action",
      key: "action",
      render: (_, record) => {
        return (
          <Space>
            <Button
              onClick={() => {
                history.push({
                  pathname: "",
                  state: {
                    Id: record.Id,
                  },
                });
              }}
            >
              查看
            </Button>
            <Button
              onClick={() => {
                history.push({
                  pathname: "",
                  state: {
                    Id: record.Id,
                  },
                });
              }}
            >
              修改
            </Button>
          </Space>
        );
      },
    },
  ];

  const checkToolBarRender = (keys, vals) => {
    if (vals.length === 0) {
      return setOptionBtn('');
    }
    if (vals.length === 1) {
      switch (vals[0].IsEnable) {
        case true:
          return setOptionBtn('true');
        case false:
          return setOptionBtn('false');
        default:
          return setOptionBtn('');
      }
    } else {
      const fType = vals[0].IsEnable;
      const fNum = vals.every((i) => i.IsEnable === fType);
      if (fNum) {
        switch (vals[0].IsEnable) {
          case true:
            return setOptionBtn('true');
          case false:
            return setOptionBtn('false');
          default:
            return setOptionBtn('');
        }
      } else {
        return setOptionBtn('');
      }
    }
  };


  return (
    <PageHeaderWrapper title="<%= data.name%>">
      <ResizeableTable
        headerTitle="标题"
        actionRef={actionRef}
        rowKey="Id"
        request={(fields) => fetchData(fields)}
        toolBarRender={toolBarRender}
        onChange={(_, _filter, _sorter) => {
          const sorterResult = _sorter;
          if(sorterResult.field) {
            setSorter({ field: sorterResult.field, order: sorterResult.order })
          }
        }}
        params={{
          sorter,
        }}
        tableAlertRender={false}
        columns={columns}
        rowSelection={{
          fixed: true,
          onChange: (keys, vals) => {
            checkToolBarRender(keys, vals);
          }
        }}
      />
    </PageHeaderWrapper>
  );
};

export default connect(({<%= data.lowerName %>}) => ({
  <%= data.lowerName %>
}))(<%= data.name %>Page);
